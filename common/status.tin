#class player_status kill
#class player_status open

#alias _status_boot {
    #line oneshot #action {^ |  Current Reboot : #%d} {#var session[boot] %%1};
    #line oneshot #action {^ |  Current Uptime : %* (%*)} {
        #format session[uptime] {%p} {%%1};
    };
    #line oneshot #action {^ |  Next Reboot in : %* |} {
        #format session[reboot] {%p} {%%1}
    };
    uptime;
};

#alias _status_coins {
    #action {^You are carrying %d coins in loose change.$} {
        #format my[coins] {%d} {%%1};
        #unaction {^You are carrying %d coins in loose change.$};
    };
    coins;
};

#alias _mob_status_clear {
    #if {"$guild" == "bard"} {
        #var mob[lightning-vortex] 0;
        #var mob[noxious-cloud] 0;
        #var mob[enrage] 0;
        #var cmbt[songs][lost][fight] 0;
    };

    #if {"$guild" == "fremen"} {
        #var mob[sand] 0;
    };
    
    #if {"$guild" == "mage"} {
        #var mob[slow] 0;
        #var mob[atrophy] 0;
        #var mob[edrain] 0;
        #var mob[pws] 0;
        #var mob[feeblemind] 0;
        #var mob[phantasmal] 0;
        #var mob[summons_killed] 0;
    };

    #if {"$guild" == "monk"} {
        #var mob[palmed] 0;
        #var mob[pressured] 0;
    };

    #if {"$guild" == "psicorps"} {
        #var mob[demoralize] 0;
        #var mob[recall_pain] 0;
        #var mob[recall_agony] 0;
        #var mob[recall_torment] 0;
    };

    #if {"$guild" == "necromancer"} {
        .dsaveMobSave;
        #var mob[maim] 0;
        #var mob[bloodarc] 0;
        #var mob[bloodfuse] 0;
    };

    #if {"$guild" == "breed"} {
		#var mob[mindsink] 0;
		#var mob[mindwipe] 0;
		#var mob[contact] 0;
		#var mob[conflict] 0;

		#NOP #var workings[flare] 0;
		#NOP #var workings[repel] 0;
		#NOP #var workings[deflect] 0;
		#NOP #var workings[contain] 0;
		#NOP #var workings[quicken] 0;
		#NOP #var workings[deathfield] 0;
    };
    
    #var mob[ewell] 0;
    #var mob[shred] 0;
    #var mob[lucanus_ring] 0;
    #var mob[lucanus_amulet] 0;
    #var mob[corpses_used] 0;
    #var mob[damage_dealt] 0;
    #var mob[damage_received] 0;
    #var mob[mob_dodges] 0;
    #var mob[class] 0;
    #var mob[gremlin] 0;
    #var mob[shred] 0;

    #var enemy[last_round] 1;
    #var enemy[round_change] 0;
    #var enemy[kill_rate_avg_count] 1;
    #unvar enemy[kill_rate];

    #var defense[current_mob_attempts] {};
};

#alias stat_record {
    #send {score short};
    #line oneshot #action {Str: %d%sDex: %d%sWis: %d%sInt: %d%sCon: %d%s Cha: %d} {
        #list tempStat clear;
        #list tempStat add {{{str} {%%1} {dex} {%%3} {wis} {%%5} {int} {%%7} {con} {%%9} {cha} {%%11}}};
    };
};

#alias _variable_export {
    #class global open;
    #map get roomvnum xcurvnum;
    #var xstrategyActive $strategyActive;
    #var xcorpseActions $corpseActions;
    #var xmkaActions $mkaActions;
    #var xspiceBeers $spiceBeers;
    #var xlastBot $lastBot;
    #var xrolm $rolm;
    #var xtheme $theme;
    #var xgags $gags;
    #var xmy $my;
    #var xwhitelist $whitelist;
    #var xchat[log][emotes] $chat[log][emotes];
    #var xdReportList $dReportList;
    #var xtoggles $toggles;

    #NOP -- These variables are at a minimum used to draw somewhere;
    #var xsplit $split;
    #var xhpbar $hpbar;
    #var xcaption $caption;
    #var xcaption_data $caption_data;
    #var xticker $ticker;
    #var xmap $map;
    #var xdraw_room $draw_room;

    #class global close;
    #class global write chars/$user/vars.tin;
};

#alias _variable_import {
    #read chars/$user/vars.tin;
    #var curvnum $xcurvnum;
    #var strategyActive $xstrategyActive;
    #var corpseActions $xcorpseActions;
    #var mkaActions $xmkaActions;
    #var hpbar $xhpbar;
    #var spiceBeers $xspiceBeers;
    #var rolm $xrolm;
    #var lastBot $xlastBot;
    #var theme $xtheme;
    #var gags $xgags;
    #var my $xmy;
    #var whitelist $xwhitelist;
    #var chat[log][emotes] $xchat[log][emotes];
    #var dReportList $xdReportList;
    #var toggles $xtoggles;
    
    #var split $split;
    #var hpbar $xhpbar;
    #var caption $xcaption;
    #var caption_data $xcaption_data;
    #var ticker $xticker;
    #var map $xmap;
    #var draw_room $xdraw_room;

    #if {"$strategyActive" == "xstrategyActive"} {#var strategyActive {}};
    #if {"$corpseActions" == "xcorpseActions"} {#var corpseActions {}};
    #if {"$mkaActions" == "xmkaActions"} {#var mkaActions {}};
    #if {"$hpbar" == "$xhpbar"} {#var hpbar {}};
    #if {"$spiceBeers" == "$xspiceBeers"} {#var spiceBeers {$xspiceBeers}};
    #if {"$rolm" == "$xrolm"} {#var rolm {}};
    #if {"$lastBot" == "$xlastBot"} {#var lastBot {}};
    #if {"$theme" == "$xtheme"} {#var theme {}};
    #if {"$gags" == "$xgags"} {#var gags {}};
    #if {"$my" == "$xmy"} {#var my {}};
    #if {"$whitelist" == "$xwhitelist"} {#var whitelist {}};
    #if {"$dReportList" == "$xdReportList"} {#read common/3kReport.tin};
    #if {"$toggles" == "$xtoggles"} {#var toggles {}};
};

#NOP Export user status every 10 mins;
#ticker status_ticker {_variable_export;} {600};

#action {As the energies swirl around you, you feel heartier and more robust.} {
    #var my[status][laugh] 1;
} {1};



#NOP -- Guild GXP Trackers;
#if {"$guild" == "mage" || "$guild" == "monk"} {
    #NOP -- 30 round rolling gxp average;
    #alias .gxp_t30_add {
        #if {&my[gxp][t30][] > 30} {
            #math my[gxp][t30_total] {$my[gxp][t30_total] - $my[gxp][t30][1]};
            #list my[gxp][t30] delete 1;
            #list my[gxp][t30] add $my[gxp][last_round];
            #math my[gxp][t30_total] {$my[gxp][t30_total] + $my[gxp][last_round]};
        } {
            #list my[gxp][t30] add $my[gxp][last_round];
            #math my[gxp][t30_total] {$my[gxp][t30_total] + $my[gxp][last_round]};
        };
        #math my[gxp][t30_average] {$my[gxp][t30_total] / &my[gxp][t30][]};
        #math my[gxp][t30_per_hr] {$my[gxp][t30_average] * 30 * 60};
        #format my[gxp][str_t30_per_hr] {%M} {$my[gxp][t30_per_hr]};
    };

    #alias .gxp_time {
        #format {my[gxp][report-time]} {%T} {};
        #math my[gxp][delta-time] {$my[gxp][report-time] - $my[gxp][start-time]};
        #if {$my[gxp][delta-time] > 3600} {
            #math my[gxp][delta-time] {$my[gxp][delta-time] / 3600 * 1.00};
            #var my[gxp][str_time] ($my[gxp][delta-time] Hrs);
        } {
            #math my[gxp][delta-time] {$my[gxp][delta-time] / 60 * 1.00};
            #var my[gxp][str_time] ($my[gxp][delta-time] Mins);
        };
    };

    #alias reset_gxp {
        #list my[gxp][t30] clear;
        #var my[gxp][total] 0;
        #var my[gxp][last_round] 0;
        #var my[gxp][best] 0;
        #var my[gxp][average] 0;
        #var my[gxp][t30_average] 0;
        #var my[gxp][t30_total] 0;
        #var my[gxp][t30_per_hr] 0;
        #var my[gxp][rounds_tracked] 0;
        #var my[gxp][starting_round] $total_rounds;
        #format {my[gxp][start-time]} {%T} {};
    };
    #delay 10 {reset_gxp};
};

#if {"$guild" == "knight" || "$guild" == "fremen"} {
    #alias .gxp_time {
        #format {my[gxp][report-time]} {%T} {};
        #math my[gxp][delta-time] {$my[gxp][report-time] - $my[gxp][start-time]};
        #if {$my[gxp][delta-time] > 3600} {
            #math my[gxp][delta-time] {$my[gxp][delta-time] / 3600 * 1.00};
            #var my[gxp][str_time] ($my[gxp][delta-time] Hrs);
        } {
            #math my[gxp][delta-time] {$my[gxp][delta-time] / 60 * 1.00};
            #var my[gxp][str_time] ($my[gxp][delta-time] Mins);
        };
    };

    #alias reset_gxp {
        #var my[gxp][hour] 0;
        #var my[gxp][total] 0;
        #var my[gxp][last_round] 0;
        #var my[gxp][average] 0;
        #var my[gxp][rounds_tracked] 0;
        #var my[gxp][starting_round] $total_rounds;
        #format {my[gxp][start-time]} {%T} {};
    };
    #delay 10 {reset_gxp};
};

#class player_status close